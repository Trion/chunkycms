from django.core.management.base import BaseCommand
from django.conf import settings
from django.contrib.auth.models import User
import os
import re
from chunkycms.models import Chunk


class Command(BaseCommand):
    help = "Gathers all chunks mentioned in templates and creates new models"

    pattern = re.compile('\{% +chunk +request +"(?P<chunk_path>[0-9A-Za-z\/_\-]+)" +%\}')

    def handle(self, *args, **options):
        #TODO maybe some usefull options like excluded file extensions or directories

        # Gather all base directories for templates
        template_bases = []
        for loader_path in settings.TEMPLATE_LOADERS:
            loader = self.__load_class(loader_path)()
            generator = loader.get_template_sources('')
            for base_path in generator:
                template_bases.append(base_path)

        # Traverse directory trees
        for base_path in template_bases:
            for sub_path in os.walk(base_path):
                # Just inspect directories with at least one file
                if sub_path[2]:
                    self.__inspect_dir(sub_path)

    def __load_class(self, class_path):
        """ loads a class from string """

        module, class_name = class_path.rsplit('.', 1)
        mod = __import__(module)
        for comp in module.split('.')[1:]:
            mod = getattr(mod, comp)
        cls = getattr(mod, class_name)

        return cls

    def __inspect_dir(self, sub_path):
        """ inspects a given subpath (generated by os.walk) for templates with chunk tag """

        for file_name in sub_path[2]:
            file_path = "{0}/{1}".format(sub_path[0], file_name)
            fp = file(file_path)
            file_content = fp.read()

            result = self.__class__.pattern.findall(file_content)
            if result:
                for chunk_path in result:
                    try:
                        Chunk.get_by_path(chunk_path)
                    except Chunk.DoesNotExist:
                        chunk = Chunk()
                        chunk.path = chunk_path
                        chunk.content = "This ist a new Chunk. You should edit it."
                        chunk.author = User.objects.all()[0]  # Maybe use a beeter way with settings
                        chunk.save()
